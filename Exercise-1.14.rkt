#lang racket
"Excersize 1.14"

; Exercise 1.14: 


; this function takes the amount to make change for as 'amount'. The number of types of coins is
; hard-coded at 5, and those denominations are hard-coded as 1, 5, 10, 25 and 50.
(define (count-change amount) (cc amount 5))

; cc is a recursive function that returns the number of ways to make change for a given amount.
; kinds-of-coins represents the number of coin denominations. these will always be, in order, from
; the denominations of penny (if 1), pennies and nickels (if 2), etc.
(define (cc amount kinds-of-coins)

  ; base case: of the amount is zero, then there is exactly 1 way to make change (return no coins)
  (cond ((= amount 0) 1)

        ; base case: if the amount is less than zero, then there is no way to make correct change
        ((or (< amount 0) (= kinds-of-coins 0)) 0)

        ; add    the number of ways to make change without the largest denomination of coin
        (else (+ (cc amount
                     (- kinds-of-coins 1))

                 ; the number of ways to make change for the amount less the largest available coin
                 (cc (- amount
                        (first-denomination
                         kinds-of-coins))
                     kinds-of-coins)))))

; takes the number of coin denominations, and returns the largest valued coin for that set of
; denominations. for example, if we have pennies, nickels and dimes, this function takes 3
; and returns the value of a dime.
(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

; Exercise 1.14: Draw the tree illustrating the process generated by the count-change procedure
; of Section 1.2.2 in making change for 11 cents. What are the orders of growth of the space and
; number of steps used by this process as the amount to be changed increases?

(count-change 11)
(cc 11 5)
(+ (cc 11 4) (cc (- 11 (first-denomination 5)) 5))
(+ (cc 11 4) (cc (- 11 50) 5))
(+ (cc 11 4) (cc -39 5))
(+ (cc 11 4) 0)
(cc 11 4)
(+ (cc 11 3) (cc (- 11 (first-denomination 4)) 4))
(+ (cc 11 3) (cc (- 11 25) 4))
(+ (cc 11 3) (cc -14 4))
(+ (cc 11 3) 0)
(cc 11 3)
(+ (cc 11 2) (cc (- 11 (first-denomination 3)) 3))
(+ (cc 11 2) (cc (- 11 10) 3))
(+ (cc 11 2) (cc 1 3))
(+ (cc 11 2) (+ (cc 1 2) (cc (- 1 (first-denomination 3)) 3)))
(+ (cc 11 2) (+ (cc 1 2) (cc (- 1 10) 3)))
(+ (cc 11 2) (+ (cc 1 2) (cc -9 3)))
(+ (cc 11 2) (+ (cc 1 2) 0))
(+ (cc 11 2) (cc 1 2))
(+ (cc 11 2) (+ (cc 1 1) (cc (- 1 (first-denomination 2)) 2)))
(+ (cc 11 2) (+ (cc 1 1) (cc (- 1 5) 2)))
(+ (cc 11 2) (+ (cc 1 1) (cc -3 2)))
(+ (cc 11 2) (+ (cc 1 1) 0))
(+ (cc 11 2) (+ (cc 1 0) (cc (- 1 (first-denomination 1)) 1)))
(+ (cc 11 2) (+ (cc 1 0) (cc (- 1 1) 1)))
(+ (cc 11 2) (+ (cc 1 0) (cc 0 1)))
(+ (cc 11 2) (+ (cc 1 0) 1))
(+ (cc 11 2) (+ 0 1))
(+ (+ (cc 11 1) (cc (- 11 (first-denomination 2)) 2)) 1)
(+ (+ (cc 11 1) (cc (- 11 5) 2)) 1)
(+ (+ (cc 11 1) (cc 6 2)) 1)
; etc...

; Call Tree
;
;                                                 (cc 11 5)
;                                                  /     \
;                                          (cc 11 4)    (cc -39 5):0
;                                            /    \
;                                    (cc 11 3)     (cc -14 4):0
;                                     /      \
;                             (cc 11 2)       (cc 1 3)
;                             / |              /     \
;                            /  |       (cc 1 2)      (cc -9 3):0
;                           /   |        /     \
;                          /    | (cc 1 1):1    (cc -4 2):0
;                         /     |
;                  (cc 11 1)  (cc 6 2)
;                  /            |    \
;                 /      (cc 6 1)    (cc 1 2)
;                /       /    |       |     \
;               /       /     |  (cc 1 1):1  (cc -4 2):0
;              /       /      |
;             / (cc 6 0):0   (cc 5 1)
;            /\              /      \
; (cc 11 0):0 (cc 10 1)  (cc 5 0):0  (cc 4 1)
;              /    \                /     \
;      (cc 10 0):0 (cc 9 1)    (cc 5 0):0  (cc 3 1)
;                [etc ...]                   /     \
;                   (cc 1 1):1          (cc 3 0):0  (cc 2 1)
;                                                    /     \
;                                               (cc 2 0):0  (cc 1 1):1